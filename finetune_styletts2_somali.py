#!/usr/bin/env python
"""
Fine-tune StyleTTS2 for Somali TTS using our custom PL-BERT model.
This script sets up and runs the StyleTTS2 fine-tuning process.
"""
import os
import sys
import argparse
import logging
import subprocess
from pathlib import Path

def setup_styletts2():
    """Clone and setup StyleTTS2 repository if not already present."""

    if not os.path.exists("StyleTTS2"):
        logging.info("Cloning StyleTTS2 repository...")
        subprocess.run([
            "git", "clone",
            "https://github.com/yl4579/StyleTTS2.git"
        ], check=True)

        logging.info("Installing StyleTTS2 requirements...")
        subprocess.run([
            "pip", "install", "-r", "StyleTTS2/requirements.txt"
        ], check=True)

        # Additional packages that might be needed
        subprocess.run([
            "pip", "install", "phonemizer", "einops", "einops-exts",
            "torchaudio", "librosa", "nltk"
        ])

    return os.path.abspath("StyleTTS2")

def download_pretrained_model():
    """Download pre-trained LibriTTS model for fine-tuning from HuggingFace."""

    models_dir = "Models/LibriTTS"
    os.makedirs(models_dir, exist_ok=True)

    checkpoint_path = os.path.join(models_dir, "epochs_2nd_00020.pth")
    config_path = os.path.join(models_dir, "config.yml")

    if not os.path.exists(checkpoint_path):
        logging.info("Downloading pre-trained LibriTTS model from HuggingFace...")

        try:
            # Download using wget or curl
            import urllib.request

            # Download checkpoint (note: filename is epochs_2nd_00020.pth on HuggingFace)
            checkpoint_url = "https://huggingface.co/yl4579/StyleTTS2-LibriTTS/resolve/main/Models/LibriTTS/epochs_2nd_00020.pth"
            logging.info(f"Downloading checkpoint from {checkpoint_url}")

            # Save as epochs_2nd_00020.pth to match HuggingFace naming
            actual_checkpoint_path = os.path.join(models_dir, "epochs_2nd_00020.pth")
            urllib.request.urlretrieve(checkpoint_url, actual_checkpoint_path)

            # Download config
            config_url = "https://huggingface.co/yl4579/StyleTTS2-LibriTTS/resolve/main/Models/LibriTTS/config.yml"
            logging.info(f"Downloading config from {config_url}")
            urllib.request.urlretrieve(config_url, config_path)

        except Exception as e:
            logging.error(f"Failed to download: {e}")
            logging.info(
                "Alternative: You can manually download from:\n"
                "https://huggingface.co/yl4579/StyleTTS2-LibriTTS/tree/main\n"
                f"And place files in: {models_dir}"
            )
            return False

    return True

def create_training_script(data_dir, styletts2_dir):
    """Create a custom training script for Somali fine-tuning."""

    script = f'''#!/usr/bin/env python
"""
StyleTTS2 fine-tuning script for Somali TTS
Auto-generated by finetune_styletts2_somali.py
"""
import sys
import os

# Add StyleTTS2 to path
sys.path.insert(0, "{styletts2_dir}")
os.chdir("{styletts2_dir}")

# Now we can import from train_finetune
import yaml
import torch

# Import the actual training script
import train_finetune

def main():
    # Load configuration
    config_path = os.path.abspath("{data_dir}/config_somali_ft.yml")

    # Prepare arguments for train_finetune
    class Args:
        config_path = config_path

    args = Args()

    # Modify sys.argv to pass config
    import sys
    sys.argv = ['train_finetune.py', '--config_path', config_path]

    print("Starting StyleTTS2 fine-tuning with Somali PL-BERT...")
    print(f"Config: {{config_path}}")
    print(f"Data dir: {data_dir}")

    # Import and run the training
    exec(open("{styletts2_dir}/train_finetune.py").read())

if __name__ == "__main__":
    main()
'''

    script_path = "train_somali_tts.py"
    with open(script_path, 'w') as f:
        f.write(script)

    logging.info(f"Created training script: {script_path}")
    return script_path

def modify_plbert_loader(styletts2_dir):
    """Modify StyleTTS2's PL-BERT loader to work with our custom model."""

    utils_file = os.path.join(styletts2_dir, "Utils/PLBERT/util.py")

    if os.path.exists(utils_file):
        logging.info("Patching PL-BERT loader for Somali model...")

        patch_content = '''
# Patch for Somali PL-BERT integration
import sys
import os

def load_plbert_somali(checkpoint_path, token_maps_path):
    """Load Somali PL-BERT model."""
    import torch
    import pickle

    # Load token maps
    with open(token_maps_path, 'rb') as f:
        token_to_id = pickle.load(f)

    # Load model checkpoint
    checkpoint = torch.load(checkpoint_path, map_location='cpu')

    return checkpoint, token_to_id
'''

        # Append the patch
        with open(utils_file, 'a') as f:
            f.write(patch_content)

def main():
    parser = argparse.ArgumentParser(description="Fine-tune StyleTTS2 for Somali")
    parser.add_argument("--data_dir", type=str, default="data_styletts2",
                      help="Directory with prepared StyleTTS2 data")
    parser.add_argument("--setup_only", action="store_true",
                      help="Only setup, don't start training")

    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)

    # Check if data is prepared
    if not os.path.exists(args.data_dir):
        logging.error(f"Data directory not found: {args.data_dir}")
        logging.info("Please run: python prepare_styletts2_data.py first")
        return

    # Setup StyleTTS2
    styletts2_dir = setup_styletts2()

    # Download pre-trained model
    if not download_pretrained_model():
        logging.error("Pre-trained model not found. Please download it manually.")
        return

    # Modify PL-BERT loader
    modify_plbert_loader(styletts2_dir)

    # Create training script
    train_script = create_training_script(args.data_dir, styletts2_dir)

    if args.setup_only:
        logging.info("Setup complete! To start training, run:")
        logging.info(f"  python {train_script}")
    else:
        logging.info("Starting training...")
        subprocess.run(["python", train_script])

if __name__ == "__main__":
    main()