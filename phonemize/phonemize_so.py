#!/usr/bin/env python
"""
Phonemize Somali sentences using eSpeak NG if available, otherwise fall back to
the rule‑based G2P defined in `phonemizer_somali.py`.  The script reads all
`.txt` files in the input directory (one sentence per line) and writes a
single JSON Lines file containing dictionaries with `phonemes` and
`graphemes` fields.  The JSONL output can then be split into training and
development sets and used to build token maps.

Each entry in the output has the form:

    {"phonemes": "p1 p2 p3", "graphemes": "g1 g2 g3", "source": "filename"}

Use the `--output` argument to specify the target JSONL file.  If
`espeak-ng` is installed and supports Somali, phonemes are generated by
running `espeak-ng -q -v so -x`.  Otherwise the fallback in
`phonemizer_somali.py` is used【371023369836432†L88-L104】.
"""
import argparse
import json
import logging
import os
import subprocess
from pathlib import Path
from typing import Optional

from phonemizer_somali import phonemize_sentence


def has_espeak_so() -> bool:
    """Return True if espeak-ng with Somali voice is available."""
    try:
        out = subprocess.check_output(["espeak-ng", "--voices"], stderr=subprocess.STDOUT, text=True)
    except Exception:
        return False
    for line in out.splitlines():
        parts = line.strip().split()
        if len(parts) > 1 and parts[1].lower() == "so":
            return True
    return False


def espeak_phonemize(text: str) -> list[str]:
    """Phonemize a sentence using eSpeak NG.  Returns a list of phoneme tokens.

    The command `espeak-ng -q -v so -x` outputs mnemonics separated by spaces.  We
    remove stress markers and punctuation.
    """
    try:
        proc = subprocess.run(["espeak-ng", "-q", "-v", "so", "-x", text], capture_output=True, text=True, check=True)
        phon_str = proc.stdout.strip()
        # Remove digits marking tones or stress, and punctuation
        phon_str = ''.join(ch for ch in phon_str if not ch.isdigit())
        tokens = phon_str.split()
        return tokens
    except Exception:
        return []


def process_file(path: Path, use_espeak: bool, out_f):
    """Process a single text file and write JSONL entries."""
    with path.open(encoding="utf-8") as f_in:
        for line in f_in:
            sentence = line.strip()
            if not sentence:
                continue
            if use_espeak:
                phones = espeak_phonemize(sentence)
                # Graphemes still come from rule‑based parser to guarantee alignment
                _, graphemes = phonemize_sentence(sentence)
                phon_str = " ".join(phones)
            else:
                phon_str, graphemes = phonemize_sentence(sentence)
            entry = {"phonemes": phon_str, "graphemes": graphemes, "source": path.name}
            out_f.write(json.dumps(entry, ensure_ascii=False) + "\n")


def main():
    parser = argparse.ArgumentParser(description="Phonemize Somali sentences into phoneme/grapheme JSONL.")
    parser.add_argument("--input", type=str, required=True, help="Directory containing sentence‑split text files.")
    parser.add_argument("--output", type=str, required=True, help="Path to output JSONL file.")
    args = parser.parse_args()
    logging.basicConfig(level=logging.INFO)
    use_espeak = has_espeak_so()
    logging.info("Using eSpeak NG: %s", use_espeak)
    input_dir = Path(args.input)
    os.makedirs(os.path.dirname(args.output), exist_ok=True)
    with open(args.output, "w", encoding="utf-8") as out_f:
        for filename in os.listdir(input_dir):
            if not filename.endswith(".txt"):
                continue
            file_path = input_dir / filename
            logging.info("Phonemizing %s", file_path)
            process_file(file_path, use_espeak, out_f)
    logging.info("Wrote phonemized JSONL to %s", args.output)


if __name__ == "__main__":
    main()